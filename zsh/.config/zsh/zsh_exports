HISTSIZE=99999
HISTFILESIZE=99999
SAVEHIST=$HISTSIZE
export HISTFILE=${HOME}/.zsh_history
export LANG=en_US.UTF-8
export FZF_DEFAULT_OPTS='--layout=reverse --border'
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
export BAT_CONFIG_PATH="${HOME}/.config/bat/config"
export PIN_ROOT="$HOME/Code/lab/spectaint/pin-3.25-98650-g8f6168173-gcc-linux"
export TERM=xterm-256color
WORDCHARS=${WORDCHARS//\/}
# export MANPAGER='nvim +Man!'
# export MANWIDTH=999

# -- some hacks to use both arm and x64 version of brew --
export PREFIX="$HOME/.local"
export PREFIXTMP="$HOME/.tmplocal"
export PATH=\
"$HOME/bin":\
$HOME/.cargo/bin:\
/usr/local/go/bin:\
"$HOME/go/bin":\
$PATH
# export CC=/usr/bin/clang
# export CXX=/usr/bin/clang++
# export LD_LIBRARY_PATH=$PREFIX/lib/
# export CC=$PREFIX/bin/clang
# export CXX=$PREFIX/bin/clang++

# Path to wezterm binary
if [[ "$(uname -s)" == Darwin ]]; then
  export PATH="$PATH:/Applications/WezTerm.app/Contents/MacOS"
fi

# M1Mac-specific settings
if [[ "$(uname -s)" == Darwin ]]; then
  # To find library include path
  # See: https://github.com/llvm/llvm-project/issues/45225
  export SDKROOT=$(xcrun --show-sdk-path)
  # To use ASAN
  # See: https://stackoverflow.com/questions/64126942/malloc-nano-zone-abandoned-due-to-inability-to-preallocate-reserved-vm-space
  export MallocNanoZone=0
fi

fif() {
  if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

# fbr - checkout git branch (including remote branches)
fbr() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

vmi() {
  local lang=${1}

  if [[ ! $lang ]]; then
    lang=$(asdf plugin-list | fzf)
  fi

  if [[ $lang ]]; then
    local versions=$(asdf list-all $lang | fzf --tac --no-sort --multi)
    if [[ $versions ]]; then
      for version in $(echo $versions);
      do; asdf install $lang $version; done;
    fi
  fi
}

vmc() {
  local lang=${1}

  if [[ ! $lang ]]; then
    lang=$(asdf plugin-list | fzf)
  fi

  if [[ $lang ]]; then
    local versions=$(asdf list $lang | fzf -m)
    if [[ $versions ]]; then
      for version in $(echo $versions);
      do; asdf uninstall $lang $version; done;
    fi
  fi
}
